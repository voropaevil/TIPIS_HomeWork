"""
–ü—Ä–æ—Å—Ç–µ–π—à–∏–π Telegram –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã—Ö —Ä–∞–±–æ—Ç —á–µ—Ä–µ–∑ OpenRouter
"""

import asyncio
import os
import tempfile
from pathlib import Path

from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import CommandStart, Command
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties

from dotenv import load_dotenv
from openai import OpenAI

from file_utils import extract_docx, extract_pdf, extract_txt

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENROUTER_KEY = os.getenv("OPENROUTER_API_KEY")

if not BOT_TOKEN or not OPENROUTER_KEY:
    print("–î–æ–±–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω—ã –≤ .env —Ñ–∞–π–ª!")
    exit(1)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = Bot(
    token=BOT_TOKEN, 
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()

# OpenRouter –∫–ª–∏–µ–Ω—Ç
openrouter = OpenAI(
    api_key=OPENROUTER_KEY,
    base_url="https://openrouter.ai/api/v1"
)

# –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
SUPPORTED_FORMATS = ['.pdf', '.docx', '.txt']
MAX_FILE_SIZE = 20 * 1024 * 1024  # 20 –ú–ë

def get_main_keyboard():
    """–ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùì –ü–æ–º–æ—â—å", callback_data="help")]
    ])

@dp.message(CommandStart())
async def start_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    await message.answer(
        f"üéì <b>–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!</b>\n\n"
        "–Ø –ø—Ä–æ–≤–µ—Ä—è—é –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ —Ä–∞–±–æ—Ç—ã —Å –ø–æ–º–æ—â—å—é –ò–ò.\n\n"
        "üìÑ <b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:</b>\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–∞–π–ª —Å —Ä–∞–±–æ—Ç–æ–π!\n\n"
        "üìÅ <b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é:</b> PDF, DOCX, TXT —Ñ–∞–π–ª—ã (–¥–æ 20 –ú–ë)\n"
        "ü§ñ <b>–ò—Å–ø–æ–ª—å–∑—É—é:</b> DeepSeek V3.1\n\n",
        reply_markup=get_main_keyboard()
    )

@dp.message(Command("help"))
async def help_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /help"""
    await message.answer(
        "üìñ <b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:</b>\n\n"
        "1Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–∞–π–ª —Å –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π —Ä–∞–±–æ—Ç–æ–π\n"
        "2Ô∏è‚É£ –ñ–¥–∏ –ø—Ä–æ–≤–µ—Ä–∫—É –æ—Ç –ò–ò (1-2 –º–∏–Ω—É—Ç—ã)\n"
        "3Ô∏è‚É£ –ü–æ–ª—É—á–∏ –¥–µ—Ç–∞–ª—å–Ω—É—é –æ—Ü–µ–Ω–∫—É\n\n"
        "<b>üìÅ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:</b>\n"
        "‚Ä¢ PDF (–¥–æ 20 –ú–ë)\n"
        "‚Ä¢ DOCX (Microsoft Word)\n"
        "‚Ä¢ TXT (—Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã)\n\n"
        "<b>üìä –ß—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è:</b>\n"
        "‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞ –∏ —Ä–µ—à–µ–Ω–∏—è\n"
        "‚Ä¢ –ü–æ–ª–Ω–æ—Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏\n" 
        "‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤—ã–≤–æ–¥–æ–≤\n"
        "‚Ä¢ –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã\n\n"
        "<b>üí° –†–µ–∑—É–ª—å—Ç–∞—Ç:</b> –û—Ü–µ–Ω–∫–∞ –∏–∑ 100 –±–∞–ª–ª–æ–≤ + —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏",
        reply_markup=get_main_keyboard()
    )

@dp.callback_query(F.data == "help")
async def help_callback(callback):
    """–ü–æ–º–æ—â—å —á–µ—Ä–µ–∑ callback"""
    await help_command(callback.message)

@dp.message(F.text & ~F.text.startswith('/'))
async def handle_text(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    await message.answer(
        "üìÑ <b>–û—Ç–ø—Ä–∞–≤—å —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏!</b>\n\n"
        "–Ø –Ω–µ –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.\n"
        "–ü—Ä–æ—Å—Ç–æ –ø—Ä–∏–∫—Ä–µ–ø–∏ —Ñ–∞–π–ª —Å –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π —Ä–∞–±–æ—Ç–æ–π.\n\n"
        "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é: PDF, DOCX, TXT",
        reply_markup=get_main_keyboard()
    )

@dp.message(F.document)
async def handle_document(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞"""
    document = message.document
    file_name = document.file_name
    file_size = document.file_size
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞
    if file_size > MAX_FILE_SIZE:
        await message.answer(
            f"‚ùå <b>–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π!</b>\n\n"
            f"üìè –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size / 1024 / 1024:.1f} –ú–ë\n"
            f"üìè –ú–∞–∫—Å–∏–º—É–º: {MAX_FILE_SIZE / 1024 / 1024} –ú–ë\n\n"
            f"–ü–æ–ø—Ä–æ–±—É–π —Å–∂–∞—Ç—å —Ñ–∞–π–ª –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π.",
            reply_markup=get_main_keyboard()
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞
    file_ext = Path(file_name).suffix.lower()
    if file_ext not in SUPPORTED_FORMATS:
        await message.answer(
            f"‚ùå <b>–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç!</b>\n\n"
            f"üìÑ –¢–≤–æ–π —Ñ–∞–π–ª: <code>{file_ext}</code>\n"
            f"üìÅ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é: <code>{', '.join(SUPPORTED_FORMATS)}</code>\n\n"
            f"–ü—Ä–µ–æ–±—Ä–∞–∑—É–π —Ñ–∞–π–ª –≤ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ñ–æ—Ä–º–∞—Ç.",
            reply_markup=get_main_keyboard()
        )
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏
    status_msg = await message.answer(
        "‚è≥ <b>–ü—Ä–æ–≤–µ—Ä—è—é —Ä–∞–±–æ—Ç—É...</b>\n\n"
        "üîÑ –ó–∞–≥—Ä—É–∂–∞—é —Ñ–∞–π–ª\n"
        "‚è≥ –ò–∑–≤–ª–µ–∫–∞—é —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ\n"
        "‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å –ø–æ–º–æ—â—å—é –ò–ò\n\n"
        "<i>–û–±—ã—á–Ω–æ –∑–∞–Ω–∏–º–∞–µ—Ç 1-2 –º–∏–Ω—É—Ç—ã</i>"
    )
    
    temp_path = None
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
        file = await bot.get_file(document.file_id)
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with tempfile.NamedTemporaryFile(suffix=file_ext, delete=False) as tmp_file:
            await bot.download_file(file.file_path, tmp_file.name)
            temp_path = tmp_file.name
        
        await status_msg.edit_text(
            "‚è≥ <b>–ü—Ä–æ–≤–µ—Ä—è—é —Ä–∞–±–æ—Ç—É...</b>\n\n"
            "‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω\n"
            "üîÑ –ò–∑–≤–ª–µ–∫–∞—é —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ\n"
            "‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å –ø–æ–º–æ—â—å—é –ò–ò"
        )
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
        if file_ext == '.txt':
            content = await extract_txt(temp_path)
        elif file_ext == '.docx':
            content = await extract_docx(temp_path)
        elif file_ext == '.pdf':
            content = await extract_pdf(temp_path)
        else:
            raise Exception("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–µ –ø—É—Å—Ç–æ–µ
        if not content.strip():
            raise Exception("–§–∞–π–ª –ø—É—Å—Ç –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —á–∏—Ç–∞–µ–º–æ–≥–æ —Ç–µ–∫—Å—Ç–∞")
        
        await status_msg.edit_text(
            "‚è≥ <b>–ü—Ä–æ–≤–µ—Ä—è—é —Ä–∞–±–æ—Ç—É...</b>\n\n"
            "‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω\n"
            "‚úÖ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–æ\n"
            "üîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å –ø–æ–º–æ—â—å—é –ò–ò\n\n"
            "<i>–ò–ò –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É...</i>"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É
        result = await check_with_ai(content)
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        if temp_path:
            os.unlink(temp_path)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
        await status_msg.edit_text(
            "‚úÖ <b>–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
            f"üìÑ <b>–§–∞–π–ª:</b> <code>{file_name}</code>\n"
            f"üìä <b>–†–∞–∑–º–µ—Ä:</b> {file_size / 1024:.1f} –ö–ë\n"
            f"üìù <b>–°–∏–º–≤–æ–ª–æ–≤:</b> {len(content):,}\n"
            f"ü§ñ <b>–ú–æ–¥–µ–ª—å:</b> DeepSeek V3.1"
        )
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ —á–∞—Å—Ç–∏ (Telegram –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ 4096 —Å–∏–º–≤–æ–ª–æ–≤)
        if len(result) > 4000:
            parts = [result[i:i+4000] for i in range(0, len(result), 4000)]
            for i, part in enumerate(parts):
                if i == 0:
                    await message.answer(f"üìã <b>–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏:</b>\n\n{part}")
                else:
                    await message.answer(f"üìã <b>–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ ({i+1}):</b>\n\n{part}")
        else:
            await message.answer(f"üìã <b>–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏:</b>\n\n{result}")
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—â–µ —Ñ–∞–π–ª
        await message.answer(
            "üéâ <b>–ì–æ—Ç–æ–≤–æ!</b>\n\n"
            "–ú–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–∏–Ω —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ üìÑ",
            reply_markup=get_main_keyboard()
        )
        
    except Exception as e:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        if temp_path:
            try:
                os.unlink(temp_path)
            except:
                pass
        
        await status_msg.edit_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞:</b>\n\n"
            f"<code>{str(e)}</code>\n\n"
            f"–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª.",
            reply_markup=get_main_keyboard()
        )

async def check_with_ai(content: str) -> str:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã —á–µ—Ä–µ–∑ OpenRouter"""
    
    prompt = f"""
–¢—ã ‚Äî –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è. –î–µ—Ç–∞–ª—å–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—É—é —Ä–∞–±–æ—Ç—É –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º:

–ö–†–ò–¢–ï–†–ò–ò:
1. –†–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∏ –∫–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞ (0-40)
2. –ü–æ–ª–Ω–æ—Ç–∞ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ (0-35)  
3. –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ (0-15)
4. –ß–∏—Å—Ç–æ—Ç–∞ –∫–æ–¥–∞ (0-10)

–ò–ù–°–¢–†–£–ö–¶–ò–Ø:
- –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–∞–∂–¥—ã–π –∫—Ä–∏—Ç–µ—Ä–∏–π —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∏–∑ –∫–æ–¥–∞
- –£–∫–∞–∂–∏ —Å–∏–ª—å–Ω—ã–µ –∏ —Å–ª–∞–±—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã
- –î–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
- –í—ã—Å—Ç–∞–≤—å –∏—Ç–æ–≥–æ–≤—É—é –æ—Ü–µ–Ω–∫—É

–ò–°–•–û–î–ù–´–ô –ö–û–î:
{content}

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê:
**–û–±—â–∏–π –∞–Ω–∞–ª–∏–∑:** [–∫—Ä–∞—Ç–∫–∏–π –≤—ã–≤–æ–¥]

**–î–µ—Ç–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞:**
- –†–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å (X/40): [–∞–Ω–∞–ª–∏–∑ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏]
- –ü–æ–ª–Ω–æ—Ç–∞ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ (Y/35): [–∞–Ω–∞–ª–∏–∑ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏]  
- –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ (Z/15): [–∞–Ω–∞–ª–∏–∑ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏]
- –ß–∏—Å—Ç–æ—Ç–∞ –∫–æ–¥–∞ (W/10): [–∞–Ω–∞–ª–∏–∑ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏]

**–°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã:** [2-3 –ø—É–Ω–∫—Ç–∞]
**–°–ª–∞–±—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã:** [2-3 –ø—É–Ω–∫—Ç–∞]  
**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:** [2-3 –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Å–æ–≤–µ—Ç–∞]

**–ò—Ç–æ–≥:** [–û—Ü–µ–Ω–∫–∞/100] - [–∫—Ä–∞—Ç–∫–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ]

–¢–æ–Ω: –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã–π, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π, –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ.
"""
    
    try:
        response = openrouter.chat.completions.create(
            model="deepseek/deepseek-chat-v3.1:free",
            messages=[
                {"role": "user", "content": prompt}
            ],
            max_tokens=1500,
            temperature=0.3
        )
        
        return response.choices[0].message.content
        
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –ò–ò: {str(e)}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç."


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    print("ü§ñ –ó–∞–ø—É—Å–∫–∞—é –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã—Ö —Ä–∞–±–æ—Ç...")
    print("üìÑ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: PDF, DOCX, TXT")
    print("ü§ñ –ò–ò –º–æ–¥–µ–ª—å: Claude 3.5 Sonnet")
    print("‚ö° –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏!")
    print("-" * 50)
    
    try:
        await dp.start_polling(bot)
    except KeyboardInterrupt:
        print("\n –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    asyncio.run(main())
